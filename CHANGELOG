Version 7.0 (10/01/2016)
========================
* This is a small changes only release, which is distributed as a new major version mainly due to the bug
  introduced in version 6.0 and subsequently fixed in 6.1.
* Exception logging improvements and logging level changes.
* Dependencies versions updates and small refactoring.

Version 6.1 (05/01/2016) - bug fixing release
=============================================
* Fixed a bug introduced in version 6.0 where the ExceptionCollector object was shared between all JDBC Connection
  objects in the pool. As a side effect of this bug, when an Exception is thrown on a particular JDBC Connection
  object, this will later cause the next taken from the pool JDBC Connection to be physically closed when the
  Connection.close() method is called - the last will cause overall performance degradation of the pool operations.
* The ExceptionCollector interface was renamed to ExceptionListener in order to better convey the exact purpose of
  this facility.

Version 6.0 (19/12/2015)
========================
* Introduced ConnectionHooks for:
  a) initConnection - will be invoked only once when the raw JDBC Connection is first created.
     This is the place to execute an application specific one-off Connection setup logic,
     such as setting the default Connection network timeout or similar.
  b) getConnection - will be invoked on the raw JDBC Connection as part of the DataSource.getConnection() flow.
     This is the place to execute an application specific per taken Connection setup logic, such as setting the
     default database schema or role, if they vary for each getConnection() call.
  c) closeConnection - will be invoked on the raw JDBC Connection as part of the Connection.close() flow.
     This is the place to execute an application specific per taken Connection winding down logic, if needed.
* Introduced ViburLogger - allows the application to receive notifications for all long lasting
  getConnection() calls, slow SQL queries, or retrieved large ResultSets. This feature can be used by the
  application to accumulate statistics of the count and execution time of the SQL queries, or similar.
* Introduced ExceptionCollector - allows the application to receive notifications for all exceptions thrown by
  the operations invoked on a JDBC Connection object or any of its derivative objects
  (e.g., Statement, ResultSet, MetaData).
* Fixed issue #5 - configureFromProperties throws an Exception when configured as a JNDI resource.
* Fixed a bug where equals/hashcode cannot be called on closed JDBC objects.

Version 5.0 (24/10/2015)
========================
* Implemented Hibernate 5+ integration (as a separate project).
  See http://www.vibur.org/#hibernate-integration-artifacts for more details.
* Implemented support for different usernames/passwords when calling DataSource.getConnection(username, password).
  See https://github.com/vibur/vibur-dbcp/issues/2#issuecomment-150200148 for more details.
* Some refactoring and javadoc updates. In particular, have extracted and encapsulated all JDBC Statement caching
  logic in the StatementCache class.

Version 4.0 (08/08/2015)
========================
* poolReducerClass is now configurable. This is the fully qualified pool reducer class name. This pool reducer
  class will be instantiated via reflection. It must implement the ThreadedPoolReducer interface and must also
  have a public constructor accepting a single argument of type ViburDBCPConfig.
* Various other refactoring and source code clean-up.

Version 3.0 (03/06/2015)
========================
* Implemented logLargeResultSet config option. This option allows SQL queries that have retrieved larger
  than a given limit ResultSet to be logged, including their concrete parameters, and optionally with
  the full stack trace of their execution. This option accompanies the logQueryExecutionLongerThanMs option,
  that logs SQL queries which execution has taken longer than a given time limit, and the
  logConnectionLongerThanMs option, that logs calls to the getConnection() method which have taken longer
  than a specified time.
* Implemented validateTimeoutInSeconds config option. This timeout value is passed to the testConnectionQuery
  (which defaults to Connection.isValid(int)) that is executed when a taken from the pool JDBC Connection
  needs to be validated before use.
* Implemented clearSQLWarnings config option - controls the clearing of the SQL warnings (if any) from the JDBC
  Connection or Statement after use.
* Various logging improvements, including logging of the concrete SQL query parameters, if the underlying
  query execution has thrown an SQL Exception.
* Have standardized all important warning messages to include information about the pool name, the number of
  currently taken from the pool Connections, and the number of remaining created in the pool Connections, in the
  following format: poolName (taken/remainingCreated).
* Various refactoring, source code simplifications, and small fixes.
* In order to better convey and suggest the client applications to upgrade when a new project version
  is out, have migrated the project to single digit version numbers via dropping the 1. version prefix.

Version 1.2.0 (09/07/2014)
==========================
* Reporting of slow SQL queries now includes the concrete queries parameters.
* Additional work and improvements on JDBC statement caching.
* Various improvements in logging and exceptions handling.

Version 1.1.1 (15/06/2014)
==========================
* Improvements and fixes in the JDBC Statements caching model.

Version 1.1.0 (02/06/2014)
==========================
* Vibur DBCP is now built and distributed as a valid R4 OSGi bundle.
* Implemented Hibernate 4.3+ integration (as a separate project).
  PLEASE NOTE that the name of the artifact providing integration for Hibernate 4.0-4.2 has changed.
  See http://www.vibur.org/#hibernate-integration-artifacts for more details.
* Retrofitted Vibur DBCP to use the new version 2.0 of Vibur Object Pool.
* driverClassName config property was reestablished as an optional config property. This property is
  needed when Vibur DBCP is used in an OSGi container, and may also be helpful when Vibur DBCP is used
  in an Apache Tomcat web application.
* JNDI ObjectFactory implemented - see ViburDBCPObjectFactory.java.
* name (of the DataSource) and enableJMX config properties added.
* loginTimeout config property added (used for the DriverManager or external DataSource configuration).
* initSQL config property added (an SQL query that will be executed only once when a JDBC Connection
  is first created).
* criticalSQLStates config property added (advanced).
* Various other performance optimizations, small improvements and bug fixes.

Version 1.0.0 (02/02/2014)
==========================
* Implemented a pool drain (destroying all connections) after a critical SQL server error.
* Allowed for creation of the initial connections in the pool from an existing/external DataSource.
* Made poolReducer optional - config value of 0 disables it.
* driverClassName config property was removed as it is not required when using Java 1.6+.
* Implemented Hibernate4 integration (as a separate project).
* Externalized the Hibernate3 integration as a separate project.

Version 0.8.3 (15/11/2013)
==========================
* Implemented the ResultSet returned by Statement interface methods as a dynamic proxy so that
  ResultSet.getStatement() will return the correct proxied Statement.
* Implemented proper handling of Connection.isValid() method and made it the default option
  for Connection testing and verification.
* Improved logging.
* Various other refactoring and small improvements/optimizations.

Version 0.8.2 (16/10/2013)
==========================
* Fix to allow for exclusion of ConcurrentLinkedHashMap from maven dependencies.

Version 0.8.1 (15/10/2013)
==========================
* Bugs fixes and refactoring.
* Simple JDBC Statements are not longer cached.

Version 0.8.0 (28/09/2013)
==========================
* Removed TransactionListener as being implemented incorrectly.
* Changed some configuration defaults, introduced logQueryExecutionLongerThanMs.
* Introduced logStackTraceForLongConnection and logStackTraceForLongQueryExecution.
* Replaced MySQL with HyperSQL for unit/integration testing purposes.

Version 0.7.2 (14/09/2013)
==========================
* JMX implementation
* Validation of connection on take only if it has stayed idle in the pool for at least
  connectionIdleLimitInSeconds time.
* Documentation update.
* Adopted changes from vibur-object-pool 0.8.8 version, particularly the PoolReducer changes.

Version 0.7.1 (12/08/2013)
==========================
* Packages structure refactoring.

Version 0.7.0 (26/07/2013)
==========================
* First tagged release.
